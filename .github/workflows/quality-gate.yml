name: Quality Gate

on:
  push:
    branches: [main]
  pull_request:
    branches: ["**"]

permissions:
  contents: read
  pull-requests: read

env:
  # Minimum coverage percentage to pass the gate
  COVERAGE_MIN: "80.0"

jobs:
  build-test-lint:
    name: Build, Test, Lint
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: shared
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: stable
          cache-dependency-path: |
            shared/go.sum

      - name: Verify module files are tidy
        run: |
          set -e
          go mod tidy
          changed=0
          # Check tracked changes in go.mod
          if ! git diff --quiet -- go.mod; then changed=1; fi
          # Handle go.sum if present; treat untracked creation as a change
          if [ -e go.sum ]; then
            if ! git ls-files --error-unmatch go.sum >/dev/null 2>&1; then changed=1; fi
            if ! git diff --quiet -- go.sum; then changed=1; fi
          fi
          if [ "$changed" -ne 0 ]; then
            echo "go.mod/go.sum are not tidy. Run 'go mod tidy'."
            git status --porcelain -- go.mod go.sum || true
            git --no-pager diff -- go.mod go.sum || true
            exit 1
          fi

      - name: Build
        run: go build ./...

      - name: Vet
        run: go vet ./...

      - name: Unit tests (race + coverage)
        run: |
          go test ./... -race -coverprofile=coverage.out -covermode=atomic -count=1
          go tool cover -func=coverage.out | tee coverage.txt

      - name: Enforce coverage threshold
        shell: bash
        run: |
          set -euo pipefail
          total=$(awk '/^total:/ {print $3}' coverage.txt | sed 's/%//')
          min=${COVERAGE_MIN}
          echo "Total coverage: ${total}% (required: ${min}%)"
          awk -v t="$total" -v m="$min" 'BEGIN { exit (t + 0 >= m + 0 ? 0 : 1) }' || {
            echo "Coverage below threshold";
            exit 1;
          }

      - name: Lint (golangci-lint)
        uses: golangci/golangci-lint-action@v8
        with:
          version: v2.1
          working-directory: shared
          args: --timeout=5m --config=../.golangci.yml

      - name: Security scan (gosec)
        uses: securego/gosec@master
        with:
          args: ./shared/...

      - name: Upload coverage artifact
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: coverage
          path: |
            shared/coverage.out
            shared/coverage.txt
